#!/usr/bin/env php
<?php

// Usage: ./bin/scan-examples [<input-dir> <output-dir>]

namespace Civi\SmartyClassifier;

use Symfony\Component\Finder\Finder;

require_once dirname(__DIR__) . '/vendor/autoload.php';

function parseArgs(array $argv): array {
  $prog = array_shift($argv);

  if (!empty($argv)) {
    return [rtrim($argv[0], '/'), rtrim($argv[1], '/')];
  }
  else {
    $prj = dirname(__DIR__);
    $files = glob("$prj/examples/*.tpl");
    return ["$prj/examples/input", "$prj/examples/output"];
  }

  return [$inDir, $outDir];
}

function processDir(string $inputBaseDir, string $outputBaseDir): void {
  Services::createTopParser();
  Services::createTagParser();

  $files = (new Finder)->in($inputBaseDir)->files()->name('*.tpl');

  foreach ($files as $fileObj) {
    /** @var \SplFileInfo $fileObj */
    $inputFile = (string) $fileObj;
    $relativeFile = substr($inputFile, strlen($inputBaseDir) + 1);
    $outputDir = $outputBaseDir . '/' . $relativeFile . '.d';
    processFile($inputFile, $outputDir);
  }

  echo "\n";
}

function processFile(string $inputFile, string $outputDir): void {
  // printf("Process %s => %s\n", $inputFile, $outputDir);
  printf("Process %s => %s (%s)\n", $inputFile, $outputDir, number_format(memory_get_usage()));
  // echo '.';

  try {
    $parsed = Services::createTopParser()->parse(file_get_contents($inputFile));
  }
  catch (\Throwable $t) {
    fwrite(STDERR,  "\nERROR ($inputFile): " . $t->getMessage() . "\n\n");
    return;
  }

  Files::mkdir($outputDir);

  foreach (Reports::getReportList() as $name) {
    Reports::writeFile($outputDir . '/' . "$name.txt", $name, $parsed);
  }

  Files::remove($outputDir . '/tag-*.tpl');
  Files::remove($outputDir . '/tag-*.tree');
  foreach ($parsed->findAll('stanza:tag') as $tag) {
    $string = (string) $tag;
    $id = md5($string);
    $parsedTag = Services::createTagParser()->parse($string);
    file_put_contents("$outputDir/tag-$id.tpl", $tag);
    Reports::writeFile("$outputDir/tag-$id.tree", 'tree', $parsedTag);
  }
}

[$inDir, $outDir] = parseArgs($argv);
processDir($inDir, $outDir);