## Tag parser -- Given that we have focused on a specific
## Smarty tag (e.g. `{$contact.name|escape}`), we will parse it.

start :=> open tag close .

tag
  :condition    => condition_verb sp expression sp?
  :block_open   => block_name (sp block_attribute)* sp?
  :block_close  => "/" block_name
  :expression   => expression (sp nofilter)?
  .

expression
   :function       => function_name "(" sp? function_args? sp? ")"
   :paren          => "(" expression ")"
   :ternary        => expression sp? "?" sp? expression sp? ":" sp? expression
   :math           => expression sp? math sp? expression
   :condition      => condition
   :datum          => datum modifier*
   .

condition_verb :=> ("if"|"elseif") .
condition
  :not         => "!" sp? expression
  :symbol      => expression sp? compare_symbol sp? expression
  :name        => expression sp compare_name sp expression
  .

modifier  :=> "|" sp? modifier_array? modifier_name sp? modifier_attribute* .
modifier_array :=> "@" .
modifier_name :=> bareword .
modifier_attribute :=> ":" sp? expression sp? .

block_name :=> bareword .
block_attribute :=> bareword (sp* "=" sp* expression)? .

datum     :=> (variable | string | number | bareword) .
## The parser's built-in "string" type is doing a lot of lifting here -- it handles quoted strings.

variable  :=> "$" bareword ("." datum | "->" datum | "[" datum "]")* .
## Unclear -- what are the precedence rules for different kinds of subscripts?

nofilter :=> "nofilter" .
function_name :=> bareword .
function_args :=> expression (sp? "," sp? expression)* .
