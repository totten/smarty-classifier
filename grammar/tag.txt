## Tag parser -- Given that we have focused on a specific
## Smarty tag (e.g. `{$contact.name|escape}`), we will parse it.

start :=> open tag close .

tag
  :condition    => condition_verb sp expression
  :block_open   => block_name (sp block_attribute)* sp?
  :block_close  => "/" block_name
  :expression   => expression (sp nofilter)?
  .

expression
   :function       => function_name "(" sp? function_args? sp? ")"  sp?
   :method         => variable "(" sp? function_args? sp? ")"  sp?
   :paren          => "(" sp? expression sp? ")"  sp?
   :ternary        => expression sp? "?" sp? expression sp? ":" sp? expression  sp?
   :math           => expression sp? math sp? expression sp?
   :or             => expression sp? op_or sp? expression sp?
   :and            => expression sp? op_and sp? expression sp?
   :rel            => expression sp? op_rel sp? expression sp?
   :rel_1          => expression sp compare_is_1 sp?
   :not            => op_not sp? expression sp?
   :datum          => datum modifier* sp?
   .

condition_verb :=> ("if"|"elseif"|"else if") .

op_not :=> ("!" | /not/i ?sp) .
op_and :=> ( "&&" | /and/i ?sp) .
op_or :=> ( "||" | /or/i ?sp) .
op_rel :=> (compare_symbol | compare_name ?sp | compare_is_2 ?sp) .

modifier  :=> "|" sp? modifier_array? modifier_name sp? modifier_attribute* .
modifier_array :=> "@" .
modifier_name :=> bareword .
modifier_attribute :=> ":" sp? expression sp? .

block_name :=> bareword .
block_attribute :=> bareword (sp* "=" sp* expression)? .

datum     :=> (variable | string | backstring | number | bareword) .
## The parser's built-in "string" type is doing a lot of lifting here -- it handles quoted strings.

variable  :=> "$" bareword ("." datum | "->" datum | "[" datum "]")* .
## Unclear -- what are the precedence rules for different kinds of subscripts?

nofilter :=> "nofilter" .
function_name :=> bareword .
function_args :=> (sp? expression sp?)*"," .
